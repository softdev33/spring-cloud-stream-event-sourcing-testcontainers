spring:
  data:
    cassandra:
      keyspace-name: mycompany
      contact-points: ${CASSANDRA_HOST:localhost}
      port: ${CASSANDRA_PORT:9042}
      schema-action: CREATE_IF_NOT_EXISTS
  cloud:
    stream:
      schema-registry-client:
        endpoint: http://${SCHEMA_REGISTRY_HOST:localhost}:${SCHEMA_REGISTRY_PORT:8081}
      kafka:
        binder:
          brokers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:29092}
          auto-add-partitions: true
          min-partition-count: 2
      bindings:
        input:
          destination: com.mycompany.userservice.user
          content-type: application/json # it's redundant here, 'application/json' is the default
          group: eventServiceGroup
  sleuth:
    sampler:
      probability: 1.0

management:
  endpoints:
    web:
      exposure.include: "*"
  endpoint:
    health:
      show-details: always

# In order to handle different content-types, Spring Cloud Stream has a "content-type negotiation and transformation"
# strategy (https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#content-type-management). The
# precedence orders are: 1st, content-type present in the message header; 2nd content-type defined in the binding;
# and finally, content-type is "application/json" (default).
#
# The producer (in the case user-service) always sets the content-type in the message header. The content-type can be
# "application/json" or "application/*+avro", depending on with which profile user-service is started.
#
# So, define the content-type in the binding is not needed due to the reasons explained about. Anyway, I will keep the
# definition here but commented.
#---
#spring:
#  profiles: avro
#  cloud:
#    stream:
#      bindings:
#        input:
#          content-type: application/*+avro
