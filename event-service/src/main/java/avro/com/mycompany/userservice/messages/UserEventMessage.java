/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mycompany.userservice.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserEventMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2268272132975302054L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserEventMessage\",\"namespace\":\"com.mycompany.userservice.messages\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventTimestamp\",\"type\":\"long\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"CREATED\",\"UPDATED\",\"DELETED\"]}},{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"userJson\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String eventId;
   private long eventTimestamp;
   private com.mycompany.userservice.messages.EventType eventType;
   private long userId;
   private java.lang.String userJson;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserEventMessage() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventTimestamp The new value for eventTimestamp
   * @param eventType The new value for eventType
   * @param userId The new value for userId
   * @param userJson The new value for userJson
   */
  public UserEventMessage(java.lang.String eventId, java.lang.Long eventTimestamp, com.mycompany.userservice.messages.EventType eventType, java.lang.Long userId, java.lang.String userJson) {
    this.eventId = eventId;
    this.eventTimestamp = eventTimestamp;
    this.eventType = eventType;
    this.userId = userId;
    this.userJson = userJson;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventTimestamp;
    case 2: return eventType;
    case 3: return userId;
    case 4: return userJson;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.String)value$; break;
    case 1: eventTimestamp = (java.lang.Long)value$; break;
    case 2: eventType = (com.mycompany.userservice.messages.EventType)value$; break;
    case 3: userId = (java.lang.Long)value$; break;
    case 4: userJson = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public java.lang.Long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public com.mycompany.userservice.messages.EventType getEventType() {
    return eventType;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.Long getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'userJson' field.
   * @return The value of the 'userJson' field.
   */
  public java.lang.String getUserJson() {
    return userJson;
  }


  /**
   * Creates a new UserEventMessage RecordBuilder.
   * @return A new UserEventMessage RecordBuilder
   */
  public static com.mycompany.userservice.messages.UserEventMessage.Builder newBuilder() {
    return new com.mycompany.userservice.messages.UserEventMessage.Builder();
  }

  /**
   * Creates a new UserEventMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserEventMessage RecordBuilder
   */
  public static com.mycompany.userservice.messages.UserEventMessage.Builder newBuilder(com.mycompany.userservice.messages.UserEventMessage.Builder other) {
    return new com.mycompany.userservice.messages.UserEventMessage.Builder(other);
  }

  /**
   * Creates a new UserEventMessage RecordBuilder by copying an existing UserEventMessage instance.
   * @param other The existing instance to copy.
   * @return A new UserEventMessage RecordBuilder
   */
  public static com.mycompany.userservice.messages.UserEventMessage.Builder newBuilder(com.mycompany.userservice.messages.UserEventMessage other) {
    return new com.mycompany.userservice.messages.UserEventMessage.Builder(other);
  }

  /**
   * RecordBuilder for UserEventMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEventMessage>
    implements org.apache.avro.data.RecordBuilder<UserEventMessage> {

    private java.lang.String eventId;
    private long eventTimestamp;
    private com.mycompany.userservice.messages.EventType eventType;
    private long userId;
    private java.lang.String userJson;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mycompany.userservice.messages.UserEventMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[1].schema(), other.eventTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userJson)) {
        this.userJson = data().deepCopy(fields()[4].schema(), other.userJson);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserEventMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mycompany.userservice.messages.UserEventMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[1].schema(), other.eventTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userJson)) {
        this.userJson = data().deepCopy(fields()[4].schema(), other.userJson);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEventTimestamp() {
      return eventTimestamp;
    }

    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder setEventTimestamp(long value) {
      validate(fields()[1], value);
      this.eventTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder clearEventTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public com.mycompany.userservice.messages.EventType getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder setEventType(com.mycompany.userservice.messages.EventType value) {
      validate(fields()[2], value);
      this.eventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.Long getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder setUserId(long value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder clearUserId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'userJson' field.
      * @return The value.
      */
    public java.lang.String getUserJson() {
      return userJson;
    }

    /**
      * Sets the value of the 'userJson' field.
      * @param value The value of 'userJson'.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder setUserJson(java.lang.String value) {
      validate(fields()[4], value);
      this.userJson = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'userJson' field has been set.
      * @return True if the 'userJson' field has been set, false otherwise.
      */
    public boolean hasUserJson() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'userJson' field.
      * @return This builder.
      */
    public com.mycompany.userservice.messages.UserEventMessage.Builder clearUserJson() {
      userJson = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UserEventMessage build() {
      try {
        UserEventMessage record = new UserEventMessage();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.eventTimestamp = fieldSetFlags()[1] ? this.eventTimestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.eventType = fieldSetFlags()[2] ? this.eventType : (com.mycompany.userservice.messages.EventType) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (java.lang.Long) defaultValue(fields()[3]);
        record.userJson = fieldSetFlags()[4] ? this.userJson : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
