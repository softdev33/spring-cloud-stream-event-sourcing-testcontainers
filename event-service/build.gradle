plugins {
    id 'org.springframework.boot' version '2.1.10.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.commercehub.gradle.plugin.avro' version '0.9.1'
    id 'com.palantir.docker' version '0.22.1'
}

group = 'com.mycompany'
version = '1.0.0'
sourceCompatibility = 1.8

ext {
    set('springCloudVersion', 'Greenwich.SR3')
    set('avroVersion', '1.8.2')
    set('modelMapperVersion', '2.3.5')
    set('springfoxSwaggerVersion', '2.9.2')
    set('cassandraUnitSpringVersion', '3.11.2.0')
    set('dropwizardMetricsVersion', '3.2.6')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-stream-schema'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation "org.apache.avro:avro:${avroVersion}"
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
    implementation "io.dropwizard.metrics:metrics-core:${dropwizardMetricsVersion}" // this dependency is needed by Cassandra

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.cassandraunit:cassandra-unit-spring:${cassandraUnitSpringVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// adding arguments to bootRun, for example: gradle event-service:bootRun -Dspring.profiles.active=test

bootRun {
    systemProperties = System.properties
}

// configuring plugin for generating Java classes for Avro Schema 

avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    description = 'Generate Java classes from Avro schema located at src/main/resources/avro'
    source("src/main/resources/avro")
    outputDir = file("src/main/java/avro")
}

compileJava.source(generateAvro.outputs)

// configuring docker builder plugin

docker {
    dependsOn build
    name "docker.mycompany.com/event-service:${version}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}
