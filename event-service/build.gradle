plugins {
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'com.commercehub.gradle.plugin.avro' version '0.9.1'
    id 'com.palantir.docker' version '0.21.0'
}

group = 'com.mycompany'
version = '0.0.1'
sourceCompatibility = 1.8

ext {
    springCloudVersion = 'Greenwich.RC2'

    avroVersion = '1.8.2'
    modelMapperVersion = '2.3.2'
    springfoxSwaggerVersion = '2.9.2'
    cassandraUnitSpringVersion = '3.3.0.2'
    dropwizardMetricsVersion = '3.2.6'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-cassandra')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter-sleuth')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    compile('org.springframework.cloud:spring-cloud-stream-schema')
    compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
    compile('org.springframework.kafka:spring-kafka')
    compile("org.apache.avro:avro:${avroVersion}")
    compile("org.modelmapper:modelmapper:${modelMapperVersion}")
    compile("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}")
    compile("io.dropwizard.metrics:metrics-core:${dropwizardMetricsVersion}") // this dependency is needed by Cassandra
    compile('org.projectlombok:lombok')
    testCompile("org.cassandraunit:cassandra-unit-spring:${cassandraUnitSpringVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.cloud:spring-cloud-stream-test-support')
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testRuntime('org.junit.jupiter:junit-jupiter-engine')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// adding arguments to bootRun, for example: gradle bootRun -Dspring.profiles.active=json

bootRun {
    systemProperties = System.properties
}

// configuring plugin for generating Java classes for Avro Schema 

avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    description = 'Generate Java classes from Avro schema located at src/main/resources/avro'
    source("src/main/resources/avro")
    outputDir = file("src/main/java/avro")
}

compileJava.source(generateAvro.outputs)

// configuring docker builder plugin

docker {
    dependsOn build
    name "docker.mycompany.com/springboot-kafka-mysql-cassandra_event-service:${version}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

// enable JUnit 5

test {
    useJUnitPlatform()
}
