plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.google.cloud.tools.jib' version '2.4.0'
}

group = 'com.mycompany'
version = '1.0.0'
sourceCompatibility = 11

ext {
    set('springCloudVersion', 'Hoxton.SR5')
    set('avroVersion', '1.9.2')
    set('mapstructVersion', '1.3.1.Final')
    set('springdocOpenApiVerison', '1.4.1')
    set('testcontainersVersion', '1.14.3')
    set('awaitilityVersion', '4.0.3')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-schema-registry-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.google.code.gson:gson'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation "org.apache.avro:avro:${avroVersion}"

    compileOnly "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation "org.springdoc:springdoc-openapi-ui:${springdocOpenApiVerison}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testImplementation "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    runtimeOnly 'mysql:mysql-connector-java'

    implementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:cassandra'

    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    //-- commented in order to send messages to kafka using testcontainers
    // testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from {
        image = 'openjdk:11.0.7'
    }
    to {
        image = "docker.mycompany.com/user-service:${project.version}"
    }
    container {
        ports = ['8080']
    }
}
