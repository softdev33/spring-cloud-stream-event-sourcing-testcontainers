plugins {
    id 'org.springframework.boot' version '2.1.10.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.palantir.docker' version '0.22.1'
}

group = 'com.mycompany'
version = '1.0.0'
sourceCompatibility = 1.8

ext {
    set('springCloudVersion', 'Greenwich.SR3')
    set('avroVersion', '1.8.2')
    set('modelMapperVersion', '2.3.5')
    set('springfoxSwaggerVersion', '2.9.2')
    set('testcontainersVersion', '1.11.4')
    set('awaitilityVersion', '3.1.6')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-stream-schema'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.google.code.gson:gson'

    implementation "org.apache.avro:avro:${avroVersion}"
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testImplementation "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
    testImplementation "org.testcontainers:cassandra:${testcontainersVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //-- commented in order to send messages to kafka using testcontainers
    // testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// adding arguments to bootRun, for example: gradle user-service:bootRun -Dspring.profiles.active=test

bootRun {
    systemProperties = System.properties
}

// configuring docker builder plugin

docker {
    dependsOn build
    name "docker.mycompany.com/user-service:${version}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}
