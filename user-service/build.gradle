plugins {
	id 'org.springframework.boot' version '2.1.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.5.RELEASE'
}

group = 'com.mycompany'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
	springfoxSwaggerVersion = '2.9.2'
	modelMapperVersion = '1.1.2'
	gsonVersion = '2.8.2'
	springCloudVersion = 'Greenwich.M3'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.cloud:spring-cloud-starter-sleuth')
	compile('org.springframework.cloud:spring-cloud-starter-zipkin')
	compile('org.springframework.cloud:spring-cloud-stream-schema')
	compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
	compile('org.springframework.kafka:spring-kafka')
	compile("org.modelmapper:modelmapper:${modelMapperVersion}")
	compile("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}")
	compile("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}")
	compile("com.google.code.gson:gson:${gsonVersion}")
	compile('com.mycompany:commons:0.0.1-SNAPSHOT')
	compile('org.projectlombok:lombok')
	runtime('mysql:mysql-connector-java')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.cloud:spring-cloud-stream-test-support')
	testCompile('org.junit.jupiter:junit-jupiter-api')
	testRuntime('org.junit.jupiter:junit-jupiter-engine')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// adding integration test

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
		testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
	group 'user-service'
	description 'Runs the integration tests'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
