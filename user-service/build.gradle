plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.google.cloud.tools.jib' version '2.7.0'
}

group = 'com.mycompany'
version = '1.0.0'
sourceCompatibility = 11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', '2020.0.0-M6')
    set('avroVersion', '1.9.2')
    set('mapstructVersion', '1.4.1.Final')
    set('lombokMapstructBindingVersion', '0.1.0')
    set('springdocOpenApiVerison', '1.5.0')
    set('springGraalvmNative', '0.8.3')
    set('testcontainersVersion', '1.15.0')
    set('awaitilityVersion', '4.0.3')
    set('dockerImagePrefix', 'docker.mycompany.com')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-schema-registry-client'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.google.code.gson:gson'

    implementation "org.apache.avro:avro:${avroVersion}"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // This dependency is needed so that Mapstruct can work with Lombok 1.18.16
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    implementation "org.springdoc:springdoc-openapi-ui:${springdocOpenApiVerison}"

    implementation "org.springframework.experimental:spring-graalvm-native:${springGraalvmNative}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testImplementation "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    runtimeOnly 'mysql:mysql-connector-java'

    implementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:cassandra'

    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //-- commented in order to send messages to kafka using testcontainers
    // testImplementation 'org.springframework.cloud:spring-cloud-stream:test-binder@test-jar'
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from {
        image = 'openjdk:11.0.9'
    }
    to {
        image = "${dockerImagePrefix}/${project.name}:${project.version}"
    }
    container {
        ports = ['8080']
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    imageName = "${dockerImagePrefix}/${project.name}:${project.version}"
    environment = [
            "BP_BOOT_NATIVE_IMAGE" : "1",
            "BP_BOOT_NATIVE_IMAGE_BUILD_ARGUMENTS": "-Dspring.spel.ignore=true"
    ]
}
